My question 
is, What should I expect if I try to run
that example program 'ex_tpcb.c' ?  Does it do anything
useful other than fail to fetch any records from the
first database it tries to access ?
Sorry, we should have included some documentation with it!  As it is,
you sort of have to look at the command options to figure out what's
going on -- not a very user friendly state of affairs, I'm afraid.
I ran it first with the initialization options
and then ran it with the '-n' option specifying some
loops of "transactions" and it fails to ever featch
anything from the fist database it tries to access in
the transaction subroutine.  Is this what is expected ?
This seems odd.  One possibility is that if you specify
the number of records during initialization (to avoid building
the large database), you also have to specify them during
the run (again, not a nice user-interface, but I use that
information to figure out what valid record IDs are).
So, in order to do a small test run, you want to try something like:
> Also, for some reason I could not build a test suite
> since it seemed to expect (on version 2.0.4 anyway)
> a "main" symbol from the TCL library and our version
> of the TCL library (version 7.6) does not seem
> to supply this.  I am new to this TCL stuff also !!

The tcl library changed between version 7.4 and 7.3 -- prior
to 7.4, the tcl library included main, now it does not.  However,
we check for this in the file tclAppInit.c.  Is it possible that
you ran ../dist/configure on a different machine than on the machine
on which you built?  You might try removing config.cache (in your
build directory), doing a make clean, and running:
	../dist/configure --enable-test
Then try building.

If this doesn't work, send us the output of the configure and the make.

> Is there some way I can verify that I have a good build
> of the DB library ?

Once you get dbtest to build, the regression test (see the README in the
test directory) will tell you that your install is successful (it takes
a few hours to run).

I hope these suggestions help, but if not, let us know and we'll see
if we can figure out what's going wrong.

- Margo



/* main (sltest) */


#define	F_DEBUG		1



#include	<sys/types.h>
#include	<sys/param.h>
#include	<sys/stat.h>
#include	<unistd.h>
#include	<fcntl.h>
#include	<signal.h>
#include	<time.h>
#include	<ftw.h>
#include	<errno.h>
#include	<dirent.h>
#include	<string.h>

#include	<bio.h>
#include	<field.h>
#include	<logfile.h>
#include	<vecelem.h>
#include	<veclist.h>
#include	<vecstr.h>
#include	<userinfo.h>
#include	<bitops.h>
#include	<char.h>

#include	"misc.h"
#include	"sortlist.h"



/* local defines */

#define	LINELEN	100



/* external subroutines */

extern int	sortlistinit(), sortlistfree() ;
extern int	sortlistadd() ;

extern char	*malloc_str() ;


/* forward references */

static int	vlcmp() ;





int main()
{
	bfile	infile, *ifp = &infile ;
	bfile	outfile, *ofp = &outfile ;
	bfile	tmpfile, *tfp = &tmpfile ;

	struct sortlist	list1 ;

	struct veclist	list2 ;

	int	rs, i, j, len ;

	char	linebuf[LINELEN + 1] ;
	char	tmpfname_buf[MAXPATHLEN + 1] ;
	char	*cp, *cp1, *cp2 ;
	char	*lp ;
	char	*ep ;


	bopen(ifp,BIO_STDIN,"r",0666) ;

	bopen(ofp,BIO_STDOUT,"wct",0666) ;

#if	F_DEBUG
	eprintf("main: entered\n\n") ;
#endif

	rs = veclistinit(&list2,0,VLP_SORTED) ;

	rs = sortlistinit(&list1,0,strcmp) ;

#if	F_DEBUG
	eprintf("main: sortlistinit rs=%d\n",rs) ;
#endif

	while ((len = bgetline(ifp,linebuf,LINELEN)) > 0) {

	    if (linebuf[len - 1] == '\n') len -= 1 ;

	    linebuf[len] = '\0' ;
	    cp = linebuf ;
	    while (CHAR_ISWHITE(*cp)) cp += 1 ;

	    cp1 = cp ;
	    while (*cp && (! CHAR_ISWHITE(*cp))) cp += 1 ;

	    if (*cp != '\0') *cp++ = '\0' ;

	    while (CHAR_ISWHITE(*cp)) cp += 1 ;

	    cp2 = cp ;

	    ep = malloc_str(cp1) ;

	    rs = sortlistadd(&list1,ep,strcmp) ;

#if	F_DEBUG
	    eprintf("main: sortlistadd rs=%d\n",rs) ;
#endif

	veclistadd(&list2,ep) ;

	} /* end while (reading lines) */

	veclistsort(&list2,vlcmp) ;


#if	F_DEBUG
	eprintf("main: compare phase\n") ;
#endif

	bprintf(ofp,"comparing phase\n\n") ;


	for (i = 0 ; sortlistget(&list1,i,&lp) >= 0 ; i += 1) {

	if (lp == NULL) continue ;

	write(3,lp,strlen(lp)) ;

	write(3,"\n",1) ;

	}


	for (i = 0 ; veclistget(&list2,i,&lp) >= 0 ; i += 1) {

	if (lp == NULL) continue ;

	write(4,lp,strlen(lp)) ;

	write(4,"\n",1) ;

	}




	for (i = 0 ; veclistget(&list2,i,&lp) >= 0 ; i += 1) {

	    if (lp == NULL) continue ;

#if	F_DEBUG
	eprintf("main: i=%d ep2=%s\n",i,lp) ;
#endif

	if (sortlistget(&list1,i,&ep) < 0) goto badcheck ;

	if (ep == NULL) goto badcheck2 ;

#if	F_DEBUG
	eprintf("main: ep1=%s\n",ep) ;
#endif

	if (strcmp(lp,ep) != 0) goto badcheck3 ;

	} /* end for */

	bprintf(ofp,"\n") ;


done:
	sortlistfree(&list1) ;

	veclistfree(&list1) ;

	bclose(ifp) ;

	bclose(ofp) ;

	return OK ;

badcheck:
	bprintf(ofp,"badcheck i=%d\n",i) ;

	goto done ;

badcheck2:
	bprintf(ofp,"badcheck2 i=%d\n",i) ;

	goto done ;

badcheck3:
	bprintf(ofp,"badcheck3 i=%d\n",i) ;

	goto done ;



}
/* end subroutine (main) */



static int vlcmp(app,bpp)
char	**app, **bpp ;
{

	return strcmp(*app,*bpp) ;
}



.\"_
.\" GBCS NGO Broadband
.\"_
.PF "'GBCS''Starbase Technology'"
.\"_
.\"_
.ds HF 3 3 3 3 3
.ds HP 12 12 10 10 10 10
.nr Hb 7
.nr Cl 3
.\"_
.PM P
.\"_
.EQ
delim $$
define z_odd % Z sub odd %
define z_even % Z sub even %
define ddl % D sup 2 L %
.EN
.\"_
.\"_ .ND "January 31, 1995"
.TL
Test Document,
Issue 0 (COMPAS ID 41984)
.AU "D. A. Morano" DAM HO 131H20000 5532 4G-530
.\"_
.AS 2 5
This document describes an experimental bus interface integrated circuit
which specifically addresses many of the needs and problems
of very high data rate buses.
The integrated circuit includes a new differential
bus driver circuit which directly addresses problems with
employing differentially driven signals in a bus application
where only one bus master can be driving the bus at a time.
The 3.3 volt 0.5 micron chip provides conversions from TTL and PECL
to $ ddl $ as well
as $ ddl $ to TTL and PECL. There is also a clock doubler, clock divider
and registered versions of the PECL to $ ddl $ and the $ ddl $ to PECL.
.AE
.MT 0
.\"_
.BG - stars.gif 2.0i 2.0i l 0.0i alo
.S +4
.SP 2
Global Business Communication Systems
.SP
Advanced Multimedia Communication Systems
.SP
Starbase
.S -4
.EP
.\"_
.H 1 "Introduction"
.P
The use of differential buses has not been very popular to date in
the low and medium performance computer industry.
The principle factor discouraging the use of differential buses
is the fact that twice as many backplane traces
(and possibly backplane/board connector pins) must be provided
as compared with a backplane bus with only single ended signals.
.P
Backplane buses which have ventured into using differentially driven
signals have usually chosen to use convention ECL voltage swings.
Buses driven differentially with ECL do not enjoy a
particular power savings advantage over TTL flavored buses since
the total voltage swing of a differentially driven ECL bus is
1.4 to 1.8 Volts or more and thus not very much smaller than some single ended
bus applications.
.P
The bus driver used in this integrated circuit is the
first CMOS only technology to implement the new
logic family called \fIDave's Differential
Logic\fP (or $ ddl $).  This $ ddl $ interface logic is
described more fully in "A New Differential Bus Scheme."\*(Rf
.RS
.BK differential scheme morano gbcs
.RF
This new interface logic solves a number of
problems related to high speed buses for telecommunications applications.
The initial application for use of this IC will be as bus transceivers in
GBCS Adaptive Standard Interface (ASI) \*(Rf
.RS
Morano, D.A., Pitio, W.M., Shugard, D.D.,
"Adaptive Standard Interface Specification,
Draft Issue 1.4,"
11340-940401-01TM.
.RF
based switching systems.
The ASI is designed to solve many of the limitations of previous
telecommunications buses while achieving a new level of bandwidth
performance.  Prior work on implementing $ ddl $ in a BiCMOS technology
can be found in the document
"Balanced Logic And Synchronous Transceiver (BLAST) I Chip"
by Morano, et all \*(Rf
.RS
Balanced Logic And Synchronous Transceiver (BLAST) I Chip
Design Specification,
Issue 0 (COMPAS ID 37165)
D. A. Morano,
W. M. Pitio,
D. D. Shugard.
.RF
.\"_
.H 1 "The $ ddl $ Driver Interface Circuit"
.P
The $ ddl $ interface circuit must satisfy one principle requirement.
The interface circuit must either be isolated from the bus in one
logic state or actively driving both leads of a differential bus signal
in the other logic state.  Many circuit designs are possible depending
on system level requirements.
The authors are primarily interested in applications using a lower
total signal voltage swing than conventional ECL differential buses.
.P
A target loaded bus odd mode impedance of 25 Ohms matches the system
requirements of ASI.
This is a reasonable value
when a bus is designed for a nominal odd mode characteristic
impedance of 50 Ohms.  
Due to bus loading, the characteristic impedance
is assumed to be lowered to half of the geometric impedance resulting
in a 25 Ohms odd mode impedance for a realistically loaded bus.
A desired total voltage swing of 0.25 Volts has also been selected
as a reasonable experimental value.
For this total voltage swing of 0.25 Volts,
an odd mode wave current of 5 milliAmperes is required.
For a bus application, a current of 10 milliAmperes would be required
to be sourced by the driver since two waves are always propagated in 
both directions on the bus.
.P
Since differentially driven signals can have 
a factor of up to ten times better signal to noise ratio\*(Rf
.RS
Rainal, A.J.,
"Balanced Interconnections For High Performance 
and Reduced Power Dissipation,"
AT&T document 11538-921013-29TM.
.RF
\&, it is reasoned that we can afford to compromise this
ratio substantially by not
swinging the signal voltage level as great as conventional 
differential ECL systems.
By using a differential receiver,
one can still receive the signals with a signal to noise ratio of
perhaps three to five times better than a single-ended receiver
but with drivers that are using less power.
.P
An ideal representation of what the new driver circuit must emulate
is shown in Figure \_FIGIDEAL
.DS
.BP ideal.ps 5.0i 8.0i c 0.0i a
.EP
.FG "Ideal Driver Circuit"
.TAG FIGIDEAL
.DE
.\"_
.H 2 "Balanced Driver Isolation"
.P
The driver must either drive a logic one state or do nothing.
Isolation of the driver bus outputs is handled 
lead that is part of the input logic, or the isolated condition 
can be obtained
by asserting a logic zero at the input of the driver.
Having a differential state when the bus is idle solves the
unbalanced signal propagation problem inherent in conventional ECL 
buses utilizing tri-state isolation.
.\"_
.H 2 "Wired Logic Function"
.P
A wired differential "or" signal is now attainable.  If every driver
asserts a logic zero, then no drivers are driving the bus (logic zero).
If one
or more drivers assert a logic one then the signal reads back as a logic one.
.\"_
