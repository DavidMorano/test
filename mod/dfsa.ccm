/* dfsa MODULE (primary-module-interface) */
/* encoding=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* Depth-First-Search (visit all nodes through un-weighted graph) */
/* version %I% last-modified %G% */


/* revision history:

	= 2013-03-03, David A­D­ Morano
	Originally written for Rightcore Network Services.

	= 2020-05-07, David A-D- Morano
	I converted this (formerly a header-only file) to a module.

*/

/* Copyright © 2013,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Name:
	dfsa

	Description:
	This subrutine implements a Depth-First-Search algorithm
	(algorithm-a).  I check for discoverability of nodes in a
	graph.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<vector>
#include	<list>
#include	<usystem.h>

export module dfsa ;

export {
    struct dfsa_edge {
	int		dst ;	/* destination vertex */
	int		weight ; /* weight of edge to this vertex */
    } ;
    struct dfsa_res {
	int		prev ; /* previous vertex */
	int		dist ; /* distance (summed weight) to present vertex */
    } ;
    extern int dfsa(dfsa_res *,
		std::vector<std::list<dfsa_edge>> *,
		int,int) ;
} /* end export */


