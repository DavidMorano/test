/* cfalphax MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* conversion of c-string digits into binary integer types */
/* version %I% last-modified %G% */


/* revision history:

	= 2008-05-19, David A­D­ Morano
	Convert numeric digit c-strings into integers.  This code
	replaces a previous algorithm that used to be used for this
	function.  I think that I was on drugs when I wrote that
	previous version (but people might say the same about this
	version also).

	= 2020-05-07, David A-D- Morano
	I converted this (formerly a header-only file) to a module.

*/

/* Copyright © 2008,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Name:
	cfalphax

	Description:
	This subroutine (template) converts a c-string of
	digits consisting of just alphabetic-type characters
	(characters 'A' -- 'Z'), along with a number base (from
	2 to 26) into the normal integer types: these being |int|,
	|long|, and |longlong| and their associated unsigned
	variations.  The conversion is for signed numbers only.  I
	am considering only signed numbers for these Alpha-base
	numbers.

	Synopsis:
    	template<typename T> 
	inline int cfalphax(cc *sp,int sl,int b,T *rp) noex

	Arguments:
	sp		source c-string od digits pointer
	sl		source c-string od digits length
	b		number base to use (2-26)
	rp		result value (of the given type) pointer

	Returns:
	>=0		OK
	<0		error (system-return)

	Notes:
	1. This code is limited to a maximum base of 64.
	2. This code only handles signed numbers.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* ordered first to configure */
#include	<climits>		/* for |CHAR_BIT| */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<stdintx.h>		/* extended integer types */
#include	<cfutil.hh>		/* namespace |cfx| */
#include	<char.h>
#include	<ischarx.h>		/* |isplusminus(2uc)| */
#include	<localmisc.h>

export module cfalphax ;

template<stdintx T> struct cfashelp {
	cint		nb = (CHAR_BIT * szof(T)) ;
	T		*rp = nullptr ;
	T		val = 0 ;	/* value to create */
	T		cutoff ;
	T		tmax = 0 ;	/* type-maximum value */
	T		tmin{} ;	/* type-minimum value */
	int		cutlim ;
	int		sl ;
	int		base ;
	bool		fneg = false ;
	cchar		*sp ;
	cfashelp(cchar *asp,int asl,int b,T *arp) noex : sp(asp), sl(asl) {
	    const T	one = 1 ;
	    tmin = (one << (nb - 1)) ;
	    tmax = (compl tmax) & (compl tmin) ;
	    base = b ;
	    rp = arp ;
	} ; /* end ctor */
	int getsign() noex {
    	    cint rs = cfx::getsign(sp,sl,&fneg) ;
	    sp += (sl - rs) ;
	    sl = rs ;
	    return rs ;
	} ; /* end if (getsign) */
	void prepare() noex {
	    cutoff = fneg ? tmin : tmax ;
	    cutlim = int(cutoff % base) ;
	    cutoff /= base ;
	    if (fneg) {
		if (cutlim > 0) {
		    cutlim -= base ;
		    cutoff += 1 ;
		}
		cutlim = (- cutlim) ;
	    }
	} ; /* end method (prepare) */
	int getval(int ch) noex {
	    int		rs = SR_INVALID ;
	    if ((ch >= 'A') && (ch <= 'Z')) {
		rs = (ch - 'A') ;
	    } else if ((ch >= 'a') && (ch <= 'z')) {
		rs = (ch - 'a') ;
	    }
	    if (rs >= base) {
		rs = SR_DOM ;
	    }
	    return rs ;
	} ; /* end method (getval) */
	int proc() noex {
	    int		rs = SR_INVALID ;
	    if (fneg) {
	        while (sl && ((rs = getval(*sp)) >= 0)) {
		    cint	nv = rs ;
		    if ((val < cutoff) || (val == cutoff && nv > cutlim)) {
			rs = SR_RANGE ;
		    } else {
		        val *= base ;
		        val -= nv ;
		    }
		    sp += 1 ;
		    sl -= 1 ;
		    if (rs < 0) break ;
	        } /* end while */
	    } else {
	    	while (sl && ((rs = getval(*sp)) >= 0)) {
		    cint	nv = rs ;
		    if ((val > cutoff) || (val == cutoff && nv > cutlim)) {
			rs = SR_RANGE ;
		    } else {
			val *= base ;
			val += nv ;
		    }
		    sp += 1 ;
		    sl -= 1 ;
		    if (rs < 0) break ;
	        } /* end while */
	    } /* end if (sign) */
	    *rp = (rs >= 0) ? val : 0 ;
	    return rs ;
	} ; /* end method (proc) */
	operator int () noex {
	    int		rs ;
	    if ((rs = getsign()) >= 0) {
		prepare() ;
		rs = proc() ;
	    }
	    return rs ;
	} ;
} ; /* end struct (cfashelp) */

export {
    template<typename T> inline int cfalphax(cc *sp,int sl,int b,T *rp) noex {
	int		rs = SR_FAULT ;
	if (sp && rp) {
	   cfashelp cfo(sp,sl,b,rp) ;
	   rs = cfo ;
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine-template (cfalphax) */
} /* end export */


