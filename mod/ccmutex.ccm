/* ccmutex MODULE (primary module interface) */
/* encoding=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* CCMUTEX object */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-12-01, David A­D­ Morano
	This subroutine was written for Rightcore Network Services.

*/

/* Copyright © 1998 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Name:
	ccmutex

	Description:
        This object implments a MUTEX using the POSIX mutex as a base.

	Q. Why do we need this?
	A. Because the (blank...blank) C++ committee did not realize
	that there already was a 'struct mutex' in standard UNIX®
	systems (as part of POSIX®) and that it gets in the way of
	the C++ |mutex| object!

*******************************************************************************/

module ;

#include	<envstandards.h>	/* must be ordered first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<new>
#include	<usystem.h>
#include	<ptm.h>
#include	<localmisc.h>

export module ccmutex ;

export {
    class ccmutex {
	ptm		m ;
    public:
	ccmutex() {
	    ptm_create(&m,nullptr) ;
	} ;
	~ccmutex() {
	    ptm_destroy(&m) ;
	} ;
	ccmutex &operator = (const ccmutex &) = delete ;
	int lock() {
	    return ptm_lock(&m) ;
	} ;
	int unlock() {
	    return ptm_unlock(&m) ;
	} ;
    } ; /* end class (ccmutex) */
    class guardmutex {
	ccmutex		&rm ;
	int		rs = 0 ;
    public:
	guardmutex(ccmutex &m) : rm(m) { 
	    rs = rm.lock() ;
	} ;
	~guardmutex() {
	    if (rs >= 0) {
	        rm.unlock() ;
	    }
	} ;
	int caputured() {
	    return rs ;
	} ;
    } ; /* end class (guardmutex) */
} /* end export */


