/* minmaxelem MODULE (primary-module-interface) */
/* encoding=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* calculate the minimum and maximum at the same time */
/* version %I% last-modified %G% */


/* revision history:

	= 2000-05-14, David A­D­ Morano
	Originally written for Rightcore Network Services.

	= 2018-09-15, David A­D­ Morano
        This was separated out from where it was to make a stand-alone
        (exported) subroutine (subroutine-template as the case is).

	= 2020-05-07, David A-D- Morano
	I converted this (formerly a header-only file) to a module.

*/

/* Copyright © 2000,2017,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Name:
	minmaxelem

	Description:
	We find both the minimum and the maximum element in a range
	of a container.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be ordered first to configure */
#include	<climits>		/* |INT_MAX| */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<utility>		/* |pair(3c++)| */
#include	<usystem.h>

export module minmaxelem ;

export {
    template<typename I,typename T>
    inline std::pair<T,T> minmaxelem(const I &bit,const I &eit) noex {
	std::pair<T,T>	res ;
	int		minval = INT_MAX ;
	int		maxval = 0 ;
	for (I it = bit ; it != eit ; it += 1) {
	    cint	e = (*it) ;
	    if (e < minval) minval = e ;
	    if (e > maxval) maxval = e ;
	} /* end for */
	res.first = minval ;
	res.second = maxval ;
	return res ;
    } /* end subroutine-template (minmaxelem) */
}


