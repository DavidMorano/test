/* hascount MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* does the given array of elements have duplicate entries */
/* version %I% last-modified %G% */


/* revision history:

	= 2011-10-08, David A­D­ Morano
	This subroutine was written for Rightcore Network Services.

	= 2020-05-07, David A-D- Morano
	I converted this (formerly a header-only file) to a module.

*/

/* Copyright © 2011,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

	Name:
	hascount

	Description:
	This subroutine checks if the given array of elements (type
	'T') has duplicate entries.  It actually counts any entries
	that are repeats.

	Synopsis:
	template(typename T> int hascount(const int *sp,int sl,int n) noex

	Arguments:
	T		type of object that contains the string to search for
	sp		source array of integers
	sl		length of source array
	n		target count to reach before returning

	Returns:
	>=0		number of duplicates
	<0		error (system-return)

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<unordered_set>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<localmisc.h>

export module hascount ;

/* local defines */


/* external subroutines */


/* external variables */


/* forwards references */


/* local variables */


/* exported variables */


/* exported subroutines */

export {
    template<typename T> bool hascount(const T *sp,int sl,int n) noex {
	typedef typename std::unordered_set<T>::iterator iter_t ;
	std::unordered_set<T>	visited ;
	int		rs = SR_OK ;
	int		c = 0 ;
	if ((sl > 1) && (n > 0)) {
	    try {
	        iter_t itend = visited.end() ;
	        for (int i = 0 ; (c < n) && (i < sl) ; i += 1) {
	            if (visited.find(*sp) != itend) {
		        c += 1 ;
		    }
		    if (c < n) visited.insert(*sp) ;
	        } /* end for */
	    } catch (...) {
		rs = SR_NOMEM ;
	    }
	} /* end if (needed more work) */
	return (rs >= 0) ? c : rs ;
    } /* end subroutine (hascount) */
} /* end export */


